package com.selfieera.deepak.selfieera.ui.home.remix;

import static android.os.Environment.getExternalStoragePublicDirectory;

import static com.arthenica.mobileffmpeg.Config.RETURN_CODE_CANCEL;
import static com.arthenica.mobileffmpeg.Config.RETURN_CODE_SUCCESS;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.MediaScannerConnection;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Environment;
import android.os.PowerManager;
import android.util.Log;
import android.widget.Toast;

import androidx.core.app.ShareCompat;

import com.arthenica.mobileffmpeg.FFmpeg;
import com.daasuu.mp4compose.FillMode;
import com.daasuu.mp4compose.composer.Mp4Composer;
import com.daasuu.mp4compose.filter.GlFilterGroup;
import com.daasuu.mp4compose.filter.GlWatermarkFilter;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.selfieera.deepak.selfieera.Editors.Functions;
import com.selfieera.deepak.selfieera.Editors.Variables;
import com.selfieera.deepak.selfieera.R;
import com.selfieera.deepak.selfieera.data.SharePost;
import com.selfieera.deepak.selfieera.utils.Constants;
import com.selfieera.deepak.selfieera.utils.Utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;
import java.util.UUID;

public class SongDownloader extends AsyncTask<String, Integer, String> {
    private final SongDownloader.onDownloadCompleted listiner;
    private final Context context;
    String name, dest;
    private PowerManager.WakeLock mWakeLock;
    private String fileN;
    private Dialog progressdialog;

    public SongDownloader(Context context,SongDownloader.onDownloadCompleted listiner) {
        this.listiner = listiner;
        this.context = context;

    }

    public interface onDownloadCompleted {
        void Success(Uri file);
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        Functions.saveResourceToFile(context);
        progressdialog = new Dialog(context);
        progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);
        progressdialog.setContentView(R.layout.loader);
        progressdialog.setCanceledOnTouchOutside(false);
        progressdialog.show();
        PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
                getClass().getName());
        mWakeLock.acquire();

    }

    @Override
    protected void onProgressUpdate(Integer... progress) {
        super.onProgressUpdate(progress);
    }

    @Override
    protected String doInBackground(String... sUrl) {
        // clickShare(sUrl[1],sUrl[2]);
        InputStream input = null;
        OutputStream output = null;
        HttpURLConnection connection = null;
        try {
            java.net.URL url = new URL(sUrl[0]);
            connection = (HttpURLConnection) url.openConnection();
            connection.connect();

            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
                return "Server returned HTTP " + connection.getResponseCode()
                        + " " + connection.getResponseMessage();
            }

            int fileLength = connection.getContentLength();

            input = connection.getInputStream();
            fileN = "SelfyDownloader_" + UUID.randomUUID().toString().substring(0, 10) + ".mp4";
//            File filename = new File(getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) + "/" + "SelfieraTemp");
//            if (!filename.isDirectory()) {
//                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
//                    Files.createDirectory(filename.toPath());
//                } else {
//                    filename.mkdirs();
//                }
//            }
            File destfile = new File(getPath().getAbsolutePath() + "/" + fileN);
            if (!destfile.exists()) {
                destfile.createNewFile();
            }
            // File file = new File(filename.getAbsolutePath(),fileN);
            output = new FileOutputStream(destfile);

            byte data[] = new byte[4096];
            long total = 0;
            int count;
            while ((count = input.read(data)) != -1) {
                if (isCancelled()) {
                    input.close();
                    return null;
                }
                total += count;
                if (fileLength > 0)
                    publishProgress((int) (total * 100 / fileLength));
                output.write(data, 0, count);
            }
        } catch (Exception e) {
            return e.toString();
        } finally {
            try {
                if (output != null)
                    output.close();
                if (input != null)
                    input.close();
            } catch (IOException ignored) {
            }

            if (connection != null)
                connection.disconnect();
        }
        return null;
    }


    @Override
    protected void onPostExecute(String result) {
        mWakeLock.release();
        if (result != null)
            Toast.makeText(context, "Download error: " + result, Toast.LENGTH_LONG).show();
        else
            Toast.makeText(context, "File downloaded", Toast.LENGTH_SHORT).show();
        MediaScannerConnection.scanFile(context,
                new String[]{getPath().getAbsolutePath() + "/" + fileN}, null,
                new MediaScannerConnection.OnScanCompletedListener() {
                    public void onScanCompleted(String newpath, Uri newuri) {
                        Log.i("ExternalStorage", "Scanned " + newpath + ":");
                        Log.i("ExternalStorage", "-> uri=" + newuri);
                        listiner.Success(newpath);
                        progressdialog.dismiss();
                    }
                });

    }

    private File getPath() {
        File mPath = null;

        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.R){
            mPath = new File(context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "/Selfieera");  //Environment.DIRECTORY_DCIM not change this
            if (!mPath.exists()) {
                mPath.mkdir();
            }
        }else{
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                mPath= new File(context.getExternalFilesDir(Environment.DIRECTORY_DCIM),"/Selfieera");  //Environment.DIRECTORY_DCIM not change this
                if (!mPath.exists()) {
                    mPath.mkdir();
                }
            }
            else
            {
                mPath= new File(Environment.getExternalStorageDirectory().toString(),"/Selfieera");
                if (!mPath.exists()) {
                    mPath.mkdir();
                }
            }
        }

        return mPath;
    }

}



//----------------------------------------call this method----------------------
 new SongDownloader(RemixActivity.this, new SongDownloader.onDownloadCompleted() {
                            @Override
                            public void Success(Uri file) {
                        
                              Log.d(TAG,file.getPath());
                            }
                        }).execute(musics.getAudio_file());
