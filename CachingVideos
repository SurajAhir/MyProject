------------step 1 add this dependency---------------
implementation 'com.danikula:videocache:2.7.1'




----------step 2 create a file named CacheWorker--------------

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.core.app.JobIntentService;

import com.google.android.exoplayer2.upstream.DataSource;
import com.google.android.exoplayer2.upstream.DataSpec;
import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
import com.google.android.exoplayer2.upstream.cache.Cache;
import com.google.android.exoplayer2.upstream.cache.CacheUtil;
import com.google.android.exoplayer2.util.Util;

import java.util.ArrayList;

public class CacheWorker extends JobIntentService {
    public static void enqueueWork(Context context, ArrayList<String> urls) {
        Intent intent = new Intent();
        intent.putStringArrayListExtra("urls", urls);
        enqueueWork(context, CacheWorker.class, 1, intent);
    }

    @Override
    protected void onHandleWork(@NonNull Intent intent) {
        ArrayList<String> urls = intent.getStringArrayListExtra("urls");
        for (String url : urls) {
            Uri dataUri = Uri.parse(url);
            DataSpec dataSpec = new DataSpec(dataUri, 0, 1024 * 1024, null);
            DataSource dataSource = new DefaultDataSourceFactory(this,
                    Util.getUserAgent(this, "tejash")).createDataSource();
            preloadVideo(dataSpec, ViloApplication.simpleCache, dataSource, new CacheUtil.ProgressListener() {
                @Override
                public void onProgress(long requestLength,
                                       long bytesCached, long newBytesCached) {
                    double downloadPercentage = (bytesCached * 100.0
                            / requestLength);
                    Log.d("ViloApplication", "downloadPercentage: " + downloadPercentage);
                }
            });
        }
    }

    static void preloadVideo(DataSpec dataSpec, Cache cache,
                             DataSource upstream,
                             CacheUtil.ProgressListener progressListener) {
        Log.d("ViloApplication", "Preloading called!");
        try {
            CacheUtil.cache(dataSpec, cache, CacheUtil.DEFAULT_CACHE_KEY_FACTORY,
                    upstream, progressListener, null);
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
}




-----------------------step 3 create a file named ViloApplication--------------------------


import android.app.Application;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.content.Context;
import android.net.Uri;
import android.os.Build;
import android.util.Log;

import com.danikula.videocache.HttpProxyCacheServer;
import com.google.android.exoplayer2.database.ExoDatabaseProvider;
import com.google.android.exoplayer2.upstream.DataSource;
import com.google.android.exoplayer2.upstream.DataSpec;
import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
import com.google.android.exoplayer2.upstream.cache.CacheDataSourceFactory;
import com.google.android.exoplayer2.upstream.cache.CacheUtil;
import com.google.android.exoplayer2.upstream.cache.LeastRecentlyUsedCacheEvictor;
import com.google.android.exoplayer2.upstream.cache.SimpleCache;
import com.google.android.exoplayer2.util.Util;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;

import java.io.File;
import java.util.ArrayList;


import static android.content.ContentValues.TAG;

import androidx.annotation.NonNull;


public class ViloApplication extends Application {
    public static final String FCM_CHANNEL_ID="FCM_CHANNEL_ID";
    public static SimpleCache simpleCache = null;
    public static LeastRecentlyUsedCacheEvictor leastRecentlyUsedCacheEvictor = null;
    public static ExoDatabaseProvider exoDatabaseProvider = null;
    public static Long exoPlayerCacheSize = (long) (90 * 1024 * 1024);

    private static HttpProxyCacheServer proxy;

    public static HttpProxyCacheServer getProxy(Context context) {
        return proxy == null ? (proxy = newProxy(context)) : proxy;
    }

    private static HttpProxyCacheServer newProxy(Context ctx) {
        return new HttpProxyCacheServer.Builder(ctx)
                .maxCacheSize(1024 * 1024 * 1024)
                .maxCacheFilesCount(20)
                .build();
    }

    private SessionManager sessionManager;
    public SessionManager getSessionManager() {
        if (sessionManager == null)
            sessionManager = new SessionManager(this);
        return sessionManager;
    }

    private static ViloApplication instance;

    public static ViloApplication getInstance() {
        return instance;
    }

    private CacheDataSourceFactory cacheDataSourceFactory;
    public void cacheVideos(ArrayList<String> urls) {
        CacheWorker.enqueueWork(this, urls);
        Log.e("ViloApplication", "Called");
        new Thread(new Runnable() {
            @Override
            public void run() {
                Log.e("ViloApplication", "run()");
                for (String url : urls) {
                    Uri dataUri = Uri.parse(url);
                    DataSpec dataSpec = new DataSpec(dataUri, 0, 500 * 1024, null);
                    DataSource dataSource = new DefaultDataSourceFactory(ViloApplication.this,
                            Util.getUserAgent(ViloApplication.this, "tejash")).createDataSource();
                    CacheWorker.preloadVideo(dataSpec, simpleCache, dataSource, new CacheUtil.ProgressListener() {
                        @Override
                        public void onProgress(long requestLength,
                                               long bytesCached, long newBytesCached) {
                            double downloadPercentage = (bytesCached * 100.0
                                    / requestLength);
                            Log.d("ViloApplication", "downloadPercentage: " + downloadPercentage);
                        }
                    });
                }
            }
        });
    }


    @Override
    public void onCreate() {
        super.onCreate();
        instance = this;
        if(Build.VERSION.SDK_INT>= Build.VERSION_CODES.O){
            NotificationChannel channel=new NotificationChannel(
                    FCM_CHANNEL_ID,"FCM_Channel", NotificationManager.IMPORTANCE_HIGH
            );
            NotificationManager manager=(NotificationManager) getSystemService(NOTIFICATION_SERVICE);
            manager.createNotificationChannel(channel);
        }
        SessionManager sessionManager = new SessionManager(this);
        Global.ACCESS_TOKEN = sessionManager.getUser() != null ? sessionManager.getUser().getData().getToken() : "";
        Global.USER_ID = sessionManager.getUser() != null ? sessionManager.getUser().getData().getUserId() : "";
        if (leastRecentlyUsedCacheEvictor == null) {
            leastRecentlyUsedCacheEvictor = new LeastRecentlyUsedCacheEvictor(exoPlayerCacheSize);
        }

        if (exoDatabaseProvider != null) {
            exoDatabaseProvider = new ExoDatabaseProvider(this);
        }

        if (simpleCache == null) {
            simpleCache = new SimpleCache(getCacheDir(), leastRecentlyUsedCacheEvictor, exoDatabaseProvider);
            if (simpleCache.getCacheSpace() >= 400207768) {
                freeMemory();
            }
            Log.i(TAG, "onCreate: " + simpleCache.getCacheSpace());
        }
    }

    public void freeMemory() {

        try {
            File dir = getCacheDir();
            deleteDir(dir);
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.runFinalization();
        Runtime.getRuntime().gc();
        System.gc();
    }

    public boolean deleteDir(File dir) {
        if (dir != null && dir.isDirectory()) {
            String[] children = dir.list();
            for (int i = 0; i < children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
            return dir.delete();
        } else if (dir != null && dir.isFile()) {
            return dir.delete();
        } else {
            return false;
        }
    }
}












--------------step 4 add ViloApplication in manifest file under application tag---------------------------
 android:name="com.selfieera.deepak.selfieera.ui.home.fragment.new_video_home_page.ViloApplication"
 
 
 
 
 
 -------------------step 5 create Cache where you load data from the server-----------------------------
 
 ArrayList<String> caches = new ArrayList<>();
                        for (Video.Data datum : video.getData()) {
                            caches.add(datum.getPostVideo());
                        }
                        CacheWorker.enqueueWork(context,caches);
                        ViloApplication.getInstance().cacheVideos(caches);
                        Log.e("Videos", "Caches called");
                        ViloApplication.getInstance().cacheVideos(caches);
                        
                        
                        
                        
  ----------------------step  6 get Cached data from the cache and put it to the exoplayer------------------------------------------
  
   if (player != null) {
            player.removeListener(this);
            player.setPlayWhenReady(false);
            player.release();
        }
        if (lastBinding != null)
            lastBinding.thumbnailViewForTrendingVideos.setVisibility(View.VISIBLE);
        player = ExoPlayerFactory.newSimpleInstance(this);
        simpleCache = ViloApplication.simpleCache;
        cacheDataSourceFactory = new CacheDataSourceFactory(simpleCache,
                new DefaultHttpDataSourceFactory(Util.getUserAgent(TrendingHashtagScrollableVideos.this, "tejash"))
                , CacheDataSource.FLAG_IGNORE_CACHE_ON_ERROR);

        ProgressiveMediaSource progressiveMediaSource = new ProgressiveMediaSource.Factory(cacheDataSourceFactory)
                .createMediaSource(Uri.parse(data.getFile()));
        binding.playerViewForTrendingVideos.setPlayer(player);
        player.setPlayWhenReady(true);
        player.seekTo(0, 0);
        player.setRepeatMode(Player.REPEAT_MODE_ALL);
        player.addListener(this);
        binding.playerViewForTrendingVideos.setResizeMode(AspectRatioFrameLayout.RESIZE_MODE_FIXED_WIDTH);
        player.prepare(progressiveMediaSource, true, false);
        lastBinding = binding;
        
        
        
        
  ----------------------------- if you want to setvisiblity gon of the thumnailview-------------------
    @Override
    public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
         if (playbackState == Player.STATE_READY) {
            if (lastBinding!=null && lastBinding.thumbnailViewForTrendingVideos!=null){
                lastBinding.thumbnailViewForTrendingVideos.setVisibility(View.GONE);
            }
        }
    }
