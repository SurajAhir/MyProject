

 // Retrofit API calls
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'


// create ApiClient file
package com.example.ojc.core.api;

import android.util.Log;

import com.example.ojc.core.utils.EndUrl;
import com.example.ojc.core.utils.Keys;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.hbb20.BuildConfig;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import okhttp3.Credentials;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class ApiClient {
    private static Retrofit retrofitWithoutAuthorization = null;
    private static Retrofit retrofitWithAuthorization = null;


    public static final String API_BASE_URL = EndUrl.INSTANCE.getBaseURL();

    private static OkHttpClient.Builder httpClient = new OkHttpClient.Builder();

    static Gson gson = new GsonBuilder()
            .setLenient()
            .create();
    private static Retrofit.Builder builder = new Retrofit.Builder().baseUrl(API_BASE_URL).addConverterFactory(GsonConverterFactory.create(gson));

    public static ApiInterface createServiceWithBasicAuth(Class<ApiInterface> serviceClass) {
        String basicAuth = Credentials.basic(Keys.INSTANCE.getUsername(), Keys.INSTANCE.getPassword());


        Log.d("LoginActivity",basicAuth);
        // Define the interceptor, add authentication headers
        Interceptor interceptor = chain -> {
            Request newRequest = chain.request().newBuilder()
                    .addHeader("Content-Type", "application/json")
                    .addHeader("Authorization", basicAuth)
                    .build();
            return chain.proceed(newRequest);
        };
        Retrofit retrofit = builder.client(httpClient.connectTimeout(240, TimeUnit.SECONDS).readTimeout(240, TimeUnit.SECONDS)
                .writeTimeout(240, TimeUnit.SECONDS).addInterceptor(interceptor).build()).build();
        return retrofit.create(serviceClass);
    }


}


//create ApiInterface
package com.example.ojc.core.api;


import com.google.gson.JsonObject;
import retrofit2.Call;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Path;
import retrofit2.http.Query;


public interface ApiInterface {



    @Headers({ "Content-Type: application/json","Accept: application/json"})
    @GET("GetOrgCredentials")
    Call<JsonObject> login(@Query("loginEmailAddress") String loginEmailAddress,
                           @Query("loginPass") String loginPass);



}


//access in desire class
        //        val request = HashMap<String, String>()
//        request["type"] = "userLogin"
//        request["api_key"] = "81dc9bdb52d04dc20036dbd8313ed055"
//        request["username"] = username
//        request["password"] = password
        val service = ApiClient.createServiceWithBasicAuth(ApiInterface::class.java)
        val call = service.login(username, password)

        call.enqueue(object : Callback<JsonObject> {
                override fun onResponse(call: Call<JsonObject>, response: Response<JsonObject>) {
                    Log.d(
                        TAG,
                        Boolean.toString(response.isSuccessful) + response.body().toString()
                    )
                    if (response.isSuccessful) {
                        val userObject: JsonObject = response.body()!!.asJsonObject

//                    val user: User = Gson().fromJson<Map<String,Any>>(userObject);


//                        Utils.storeStateOfString(
//                            Utils.getSharedPreferences(this@Login),
//                            Constants.isLogin,
//                            "Y"
//                        )
                    }
                }

                override fun onFailure(call: Call<JsonObject>, t: Throwable) {
                    Log.d(TAG, "every thing is failed............!" + call.request())
                }

            })
