package com.example.ojc.core.database

import android.content.ContentValues
import android.content.Context
import android.database.Cursor
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import com.example.ojc.core.utils.Constants


class DBHandler  // creating a constructor for our database handler.
    (context: Context?) :
    SQLiteOpenHelper(context, Constants.DB_NAME, null, Constants.DB_VERSION) {
    // below method is for creating a database by running a sqlite query
    override fun onCreate(db: SQLiteDatabase) {
        // along with their data types.
        val query1 = ("CREATE TABLE IF NOT EXISTS " + Constants.voucherDetails + " ("
                + Constants.id + " INTEGER PRIMARY KEY AUTOINCREMENT, "
                + Constants.voucherNumber + " TEXT,"
                + Constants.voucherId + " TEXT,"
                + Constants.imageRequired + " TEXT,"
                + Constants.isBlank + " TEXT,"
                + Constants.isManual + " TEXT,"
                + Constants.scannedBarcode + " TEXT,"
                + Constants.clientID + " TEXT,"
                + Constants.voucherAmount + " TEXT,"
                + Constants.imagePath + " TEXT,"
                + Constants.voucherDetailsCurrentId + " TEXT)")


        // at last we are calling a exec sql
        // method to execute above sql query
        db.execSQL(query1)
      
    }

    // this method is use to add new course to our sqlite database.
    fun insertIntoVoucherDetails(
        values: ContentValues
    ) {
        val db = this.writableDatabase

        db.insert(Constants.voucherDetails, null, values)
        db.close()
    }

fun updateVoucherDetails(id:String,values: ContentValues){
    var db=this.writableDatabase
    db.update(Constants.voucherDetails,values, "${Constants.voucherDetailsCurrentId} = ?",
        arrayOf(id)
    )
}

    fun fetchAllFromVoucherDetails(): MutableList<Map<String, Any>> {
        val db = this.writableDatabase
        val c: Cursor = db.rawQuery("SELECT * FROM ${Constants.voucherDetails}", null)
        var list: MutableList<Map<String, Any>> = mutableListOf()
        if (c.moveToFirst()) {
            do {
                // Passing values
                list.add(mapOf(Constants.id to c.getString(0)))
                list.add(mapOf(Constants.voucherNumber to c.getString(1)))
                list.add(mapOf(Constants.voucherId to c.getString(2)))
                list.add(mapOf(Constants.imageRequired to c.getString(3)))
                list.add(mapOf(Constants.isBlank to c.getString(4)))
                list.add(mapOf(Constants.isManual to c.getString(5)))
                list.add(mapOf(Constants.scannedBarcode to c.getString(6)))
                list.add(mapOf(Constants.clientID to c.getString(7)))
                list.add(mapOf(Constants.voucherAmount to c.getString(8)))
                list.add(mapOf(Constants.imagePath to c.getString(9)))
                list.add(mapOf(Constants.voucherDetailsCurrentId to c.getString(10)))
            } while (c.moveToNext())
        }
        c.close()
        db.close()
        return list
    }

    fun fetchFromVoucherDetailsWithId(id: String) {
        val db = this.writableDatabase

        val c: Cursor = db.rawQuery(
            "SELECT * FROM ${Constants.voucherDetails} WHERE ${Constants.active} = ?",
            arrayOf("active")
        )
        var list: MutableList<Map<String, Any>> = mutableListOf()
        if (c.moveToFirst()) {
            do {
                // Passing values
                list.add(mapOf(Constants.id to c.getString(0)))
                list.add(mapOf(Constants.voucherNumber to c.getString(1)))
                list.add(mapOf(Constants.voucherId to c.getString(2)))
                list.add(mapOf(Constants.imageRequired to c.getString(3)))
                list.add(mapOf(Constants.isBlank to c.getString(4)))
                list.add(mapOf(Constants.isManual to c.getString(5)))
                list.add(mapOf(Constants.scannedBarcode to c.getString(6)))
                list.add(mapOf(Constants.clientID to c.getString(7)))
                list.add(mapOf(Constants.voucherAmount to c.getString(8)))
                list.add(mapOf(Constants.imagePath to c.getString(9)))
                list.add(mapOf(Constants.voucherDetailsCurrentId to c.getString(10)))
            } while (c.moveToNext())
        }
        c.close()
        db.close()
    }


    fun deleteVoucherDetails(id:Int) {
        var db = this.writableDatabase
         db.delete(Constants.voucherDetails,"id=?", arrayOf(id.toString()))

    }




    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        // this method is called to check if the table exists already.
        db.execSQL("DROP TABLE IF EXISTS " + Constants.voucherDetails)
        db.execSQL("DROP TABLE IF EXISTS " + Constants.creditCardUserDetails)
        onCreate(db)
    }

}


//my constants file *********************

package com.example.ojc.core.utils

object Constants {
   
    // below variable is for our database name.
    const val DB_NAME = "ojcdb"
    const val id = "id"

    // below int is our database version
     const val DB_VERSION = 1

    //voucherDetailsTable
    const val voucherDetails = "voucherDetails"; //table name
    const val voucherNumber = "voucherNumber";
    const val voucherId = "voucherId";
    const val imageRequired = "imageRequired";
    const val isBlank = "isBlank";
    const val isManual = "isManual";
    const val scannedBarcode = "scannedBarcode";
    const val clientID = "clientID";
    const val voucherAmount = "voucherAmount";
    const val imagePath = "imagePath";
    const val voucherDetailsCurrentId = "voucherDetailsCurrentId";

  

}
